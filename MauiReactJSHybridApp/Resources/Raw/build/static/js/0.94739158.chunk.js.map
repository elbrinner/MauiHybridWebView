{"version":3,"sources":["../node_modules/@aparajita/capacitor-biometric-auth/dist/esm/native.js","../../../src/index.ts","../node_modules/@aparajita/capacitor-biometric-auth/dist/esm/base.js"],"names":["BiometricAuthNative","BiometricAuthBase","constructor","capProxy","super","this","checkBiometry","authenticate","Promise","resolve","isAvailable","biometryType","BiometryType","none","biometryTypes","reason","code","BiometryErrorType","options","setBiometryType","type","unimplemented","App","web","then","m","AppWeb","WebPlugin","addResumeListener","listener","addListener","_ref","isActive","info","catch","console","error"],"mappings":"wGAAA,gFAGO,MAAMA,UAA4BC,IACrCC,YAAYC,GACRC,QACAC,KAAKC,cAAgBH,EAASG,cAC9BD,KAAKE,aAAeJ,EAASI,YACjC,CACA,mBAAMD,GAEF,OAAOE,QAAQC,QAAQ,CACnBC,aAAa,EACbC,aAAcC,IAAaC,KAC3BC,cAAe,GACfC,OAAQ,GACRC,KAAMC,IAAkBJ,MAEhC,CAEA,kBAAMN,CAAaW,GAAW,CAE9B,qBAAMC,CAENC,GACI,MAAMf,KAAKgB,cAAc,8BAC7B,E,kFCtBJ,MAAMC,EAAM,YAA0B,MAAO,CAC3CC,IAAK,IAAM,+BAAgBC,MAAKC,GAAK,IAAIA,EAAEC,WCFtC,MAAMzB,UAA0B0B,IACnCC,kBAAkBC,GACd,OAAOP,EAAIQ,YAAY,kBAAkBC,IAAkB,IAAjB,SAAEC,GAAUD,EAC9CC,GACA3B,KAAKC,gBACAkB,MAAMS,IACPJ,EAASI,EAAK,IAEbC,MAAMC,QAAQC,MACvB,GAER,E","file":"static/js/0.94739158.chunk.js","sourcesContent":["import { BiometricAuthBase } from './base';\nimport { BiometryErrorType, BiometryType } from './definitions';\n// eslint-disable-next-line import/prefer-default-export\nexport class BiometricAuthNative extends BiometricAuthBase {\n    constructor(capProxy) {\n        super();\n        this.checkBiometry = capProxy.checkBiometry;\n        this.authenticate = capProxy.authenticate;\n    }\n    async checkBiometry() {\n        // Never used, satisfy the compiler\n        return Promise.resolve({\n            isAvailable: true,\n            biometryType: BiometryType.none,\n            biometryTypes: [],\n            reason: '',\n            code: BiometryErrorType.none,\n        });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars,@typescript-eslint/no-empty-function\n    async authenticate(options) { }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async setBiometryType(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    type) {\n        throw this.unimplemented('setBiometryType is web only');\n    }\n}\n","import { registerPlugin } from '@capacitor/core';\n\nimport type { AppPlugin } from './definitions';\n\nconst App = registerPlugin<AppPlugin>('App', {\n  web: () => import('./web').then(m => new m.AppWeb()),\n});\n\nexport * from './definitions';\nexport { App };\n","import { App } from '@capacitor/app';\nimport { WebPlugin } from '@capacitor/core';\n// eslint-disable-next-line import/prefer-default-export\nexport class BiometricAuthBase extends WebPlugin {\n    addResumeListener(listener) {\n        return App.addListener('appStateChange', ({ isActive }) => {\n            if (isActive) {\n                this.checkBiometry()\n                    .then((info) => {\n                    listener(info);\n                })\n                    .catch(console.error);\n            }\n        });\n    }\n}\n"],"sourceRoot":""}