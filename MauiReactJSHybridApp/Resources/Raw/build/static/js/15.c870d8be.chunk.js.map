{"version":3,"sources":["../node_modules/@aparajita/capacitor-biometric-auth/dist/esm/web.js","../../../src/index.ts","../node_modules/@aparajita/capacitor-biometric-auth/dist/esm/base.js"],"names":["BiometricAuthWeb","BiometricAuthBase","constructor","super","arguments","this","biometryType","BiometryType","none","checkBiometry","Promise","resolve","isAvailable","biometryTypes","reason","code","BiometryErrorType","authenticate","options","then","_ref","_a","confirm","concat","getBiometryName","BiometryError","userCancel","biometryNotAvailable","setBiometryType","type","hasOwnProperty","App","web","m","AppWeb","WebPlugin","addResumeListener","listener","addListener","isActive","info","catch","console","error"],"mappings":"yGAAA,sFAIO,MAAMA,UAAyBC,IAClCC,cACIC,SAASC,WACTC,KAAKC,aAAeC,IAAaC,IACrC,CACA,mBAAMC,GACF,OAAOC,QAAQC,QAAQ,CACnBC,YAAaP,KAAKC,eAAiBC,IAAaC,KAChDF,aAAcD,KAAKC,aACnBO,cAAe,GACfC,OAAQ,GACRC,KAAMC,IAAkBR,MAEhC,CACA,kBAAMS,CAAaC,GACf,OAAOb,KAAKI,gBAAgBU,MAAKC,IAAmC,IAAlC,YAAER,EAAW,aAAEN,GAAcc,EAC3D,IAAIC,EACJ,GAAIT,EAAa,CACb,GAEAU,QAAoF,QAA3ED,EAAiB,OAAZH,QAAgC,IAAZA,OAAqB,EAASA,EAAQJ,cAA2B,IAAPO,EAAgBA,EAAK,qBAAHE,OAAwBC,YAAgBlB,GAAa,MAC/J,OAEJ,MAAM,IAAImB,IAAc,iBAAkBT,IAAkBU,WAChE,CACA,MAAM,IAAID,IAAc,yBAA0BT,IAAkBW,qBAAqB,GAEjG,CACA,qBAAMC,CAAgBC,GAClB,MAAoB,qBAATA,IAGS,kBAATA,EAEHtB,IAAauB,eAAeD,KAE5BxB,KAAKC,aAAeC,IAAasB,IAIrCxB,KAAKC,aAAeuB,GAVbnB,QAAQC,SAavB,E,kFC3CJ,MAAMoB,EAAM,YAA0B,MAAO,CAC3CC,IAAK,IAAM,+BAAgBb,MAAKc,GAAK,IAAIA,EAAEC,WCFtC,MAAMjC,UAA0BkC,IACnCC,kBAAkBC,GACd,OAAON,EAAIO,YAAY,kBAAkBlB,IAAkB,IAAjB,SAAEmB,GAAUnB,EAC9CmB,GACAlC,KAAKI,gBACAU,MAAMqB,IACPH,EAASG,EAAK,IAEbC,MAAMC,QAAQC,MACvB,GAER,E","file":"static/js/15.c870d8be.chunk.js","sourcesContent":["import { BiometricAuthBase } from './base';\nimport { BiometryError, BiometryErrorType, BiometryType } from './definitions';\nimport { getBiometryName } from './web-utils';\n// eslint-disable-next-line import/prefer-default-export\nexport class BiometricAuthWeb extends BiometricAuthBase {\n    constructor() {\n        super(...arguments);\n        this.biometryType = BiometryType.none;\n    }\n    async checkBiometry() {\n        return Promise.resolve({\n            isAvailable: this.biometryType !== BiometryType.none,\n            biometryType: this.biometryType,\n            biometryTypes: [],\n            reason: '',\n            code: BiometryErrorType.none,\n        });\n    }\n    async authenticate(options) {\n        return this.checkBiometry().then(({ isAvailable, biometryType }) => {\n            var _a;\n            if (isAvailable) {\n                if (\n                // eslint-disable-next-line no-alert\n                confirm((_a = options === null || options === void 0 ? void 0 : options.reason) !== null && _a !== void 0 ? _a : `Authenticate with ${getBiometryName(biometryType)}?`)) {\n                    return;\n                }\n                throw new BiometryError('User cancelled', BiometryErrorType.userCancel);\n            }\n            throw new BiometryError('Biometry not available', BiometryErrorType.biometryNotAvailable);\n        });\n    }\n    async setBiometryType(type) {\n        if (typeof type === 'undefined') {\n            return Promise.resolve();\n        }\n        if (typeof type === 'string') {\n            // eslint-disable-next-line no-prototype-builtins\n            if (BiometryType.hasOwnProperty(type)) {\n                // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n                this.biometryType = BiometryType[type];\n            }\n        }\n        else {\n            this.biometryType = type;\n        }\n        return Promise.resolve();\n    }\n}\n","import { registerPlugin } from '@capacitor/core';\n\nimport type { AppPlugin } from './definitions';\n\nconst App = registerPlugin<AppPlugin>('App', {\n  web: () => import('./web').then(m => new m.AppWeb()),\n});\n\nexport * from './definitions';\nexport { App };\n","import { App } from '@capacitor/app';\nimport { WebPlugin } from '@capacitor/core';\n// eslint-disable-next-line import/prefer-default-export\nexport class BiometricAuthBase extends WebPlugin {\n    addResumeListener(listener) {\n        return App.addListener('appStateChange', ({ isActive }) => {\n            if (isActive) {\n                this.checkBiometry()\n                    .then((info) => {\n                    listener(info);\n                })\n                    .catch(console.error);\n            }\n        });\n    }\n}\n"],"sourceRoot":""}